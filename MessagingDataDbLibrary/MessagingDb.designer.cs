#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MessagingDataDbLibrary
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
    using System.Configuration;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="NewMessDb")]
	public partial class MessagingDbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCONTACTLIST(CONTACTLIST instance);
    partial void UpdateCONTACTLIST(CONTACTLIST instance);
    partial void DeleteCONTACTLIST(CONTACTLIST instance);
    partial void InsertGROUP(GROUP instance);
    partial void UpdateGROUP(GROUP instance);
    partial void DeleteGROUP(GROUP instance);
    partial void InsertMESSAGE(MESSAGE instance);
    partial void UpdateMESSAGE(MESSAGE instance);
    partial void DeleteMESSAGE(MESSAGE instance);
    partial void InsertROLE(ROLE instance);
    partial void UpdateROLE(ROLE instance);
    partial void DeleteROLE(ROLE instance);
    partial void InsertUSER(USER instance);
    partial void UpdateUSER(USER instance);
    partial void DeleteUSER(USER instance);
    partial void InsertUSERSOFGROUP(USERSOFGROUP instance);
    partial void UpdateUSERSOFGROUP(USERSOFGROUP instance);
    partial void DeleteUSERSOFGROUP(USERSOFGROUP instance);
    partial void InsertMESSTOUSR(MESSTOUSR instance);
    partial void UpdateMESSTOUSR(MESSTOUSR instance);
    partial void DeleteMESSTOUSR(MESSTOUSR instance);
    #endregion
		
		public MessagingDbDataContext() : 
				base(ConfigurationManager.ConnectionStrings["MessDbConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MessagingDbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MessagingDbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MessagingDbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MessagingDbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CONTACTLIST> CONTACTLISTs
		{
			get
			{
				return this.GetTable<CONTACTLIST>();
			}
		}
		
		public System.Data.Linq.Table<GROUP> GROUPs
		{
			get
			{
				return this.GetTable<GROUP>();
			}
		}
		
		public System.Data.Linq.Table<MESSAGE> MESSAGEs
		{
			get
			{
				return this.GetTable<MESSAGE>();
			}
		}
		
		public System.Data.Linq.Table<ROLE> ROLEs
		{
			get
			{
				return this.GetTable<ROLE>();
			}
		}
		
		public System.Data.Linq.Table<USER> USERs
		{
			get
			{
				return this.GetTable<USER>();
			}
		}
		
		public System.Data.Linq.Table<USERSOFGROUP> USERSOFGROUPs
		{
			get
			{
				return this.GetTable<USERSOFGROUP>();
			}
		}
		
		public System.Data.Linq.Table<USR2ROLE> USR2ROLEs
		{
			get
			{
				return this.GetTable<USR2ROLE>();
			}
		}
		
		public System.Data.Linq.Table<MESSTOUSR> MESSTOUSRs
		{
			get
			{
				return this.GetTable<MESSTOUSR>();
			}
		}
	}
	
	[Table(Name="dbo.CONTACTLIST")]
	public partial class CONTACTLIST : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _USR_MAIN;
		
		private int _USR_CONTACT;
		
		private EntityRef<USER> _USER;
		
		private EntityRef<USER> _USER1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUSR_MAINChanging(int value);
    partial void OnUSR_MAINChanged();
    partial void OnUSR_CONTACTChanging(int value);
    partial void OnUSR_CONTACTChanged();
    #endregion
		
		public CONTACTLIST()
		{
			this._USER = default(EntityRef<USER>);
			this._USER1 = default(EntityRef<USER>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_USR_MAIN", DbType="Int NOT NULL")]
		public int USR_MAIN
		{
			get
			{
				return this._USR_MAIN;
			}
			set
			{
				if ((this._USR_MAIN != value))
				{
					if (this._USER1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUSR_MAINChanging(value);
					this.SendPropertyChanging();
					this._USR_MAIN = value;
					this.SendPropertyChanged("USR_MAIN");
					this.OnUSR_MAINChanged();
				}
			}
		}
		
		[Column(Storage="_USR_CONTACT", DbType="Int NOT NULL")]
		public int USR_CONTACT
		{
			get
			{
				return this._USR_CONTACT;
			}
			set
			{
				if ((this._USR_CONTACT != value))
				{
					if (this._USER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUSR_CONTACTChanging(value);
					this.SendPropertyChanging();
					this._USR_CONTACT = value;
					this.SendPropertyChanged("USR_CONTACT");
					this.OnUSR_CONTACTChanged();
				}
			}
		}
		
		[Association(Name="USER_CONTACTLIST", Storage="_USER", ThisKey="USR_CONTACT", IsForeignKey=true)]
		public USER USER
		{
			get
			{
				return this._USER.Entity;
			}
			set
			{
				USER previousValue = this._USER.Entity;
				if (((previousValue != value) 
							|| (this._USER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._USER.Entity = null;
						previousValue.CONTACTLISTs.Remove(this);
					}
					this._USER.Entity = value;
					if ((value != null))
					{
						value.CONTACTLISTs.Add(this);
						this._USR_CONTACT = value.ID_USR;
					}
					else
					{
						this._USR_CONTACT = default(int);
					}
					this.SendPropertyChanged("USER");
				}
			}
		}
		
		[Association(Name="USER_CONTACTLIST1", Storage="_USER1", ThisKey="USR_MAIN", IsForeignKey=true)]
		public USER USER1
		{
			get
			{
				return this._USER1.Entity;
			}
			set
			{
				USER previousValue = this._USER1.Entity;
				if (((previousValue != value) 
							|| (this._USER1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._USER1.Entity = null;
						previousValue.CONTACTLISTs1.Remove(this);
					}
					this._USER1.Entity = value;
					if ((value != null))
					{
						value.CONTACTLISTs1.Add(this);
						this._USR_MAIN = value.ID_USR;
					}
					else
					{
						this._USR_MAIN = default(int);
					}
					this.SendPropertyChanged("USER1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.GROUPS")]
	public partial class GROUP : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID_GROUP;
		
		private string _GRP_NAME;
		
		private int _GRP_TYPE;
		
		private System.Nullable<char> _GRP_STATE;
		
		private System.DateTime _C_DATE;
		
		private int _C_USER;
		
		private System.Nullable<System.DateTime> _M_DATE;
		
		private System.Data.Linq.Binary _M_USER;
		
		private EntitySet<USERSOFGROUP> _USERSOFGROUPs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_GROUPChanging(long value);
    partial void OnID_GROUPChanged();
    partial void OnGRP_NAMEChanging(string value);
    partial void OnGRP_NAMEChanged();
    partial void OnGRP_TYPEChanging(int value);
    partial void OnGRP_TYPEChanged();
    partial void OnGRP_STATEChanging(System.Nullable<char> value);
    partial void OnGRP_STATEChanged();
    partial void OnC_DATEChanging(System.DateTime value);
    partial void OnC_DATEChanged();
    partial void OnC_USERChanging(int value);
    partial void OnC_USERChanged();
    partial void OnM_DATEChanging(System.Nullable<System.DateTime> value);
    partial void OnM_DATEChanged();
    partial void OnM_USERChanging(System.Data.Linq.Binary value);
    partial void OnM_USERChanged();
    #endregion
		
		public GROUP()
		{
			this._USERSOFGROUPs = new EntitySet<USERSOFGROUP>(new Action<USERSOFGROUP>(this.attach_USERSOFGROUPs), new Action<USERSOFGROUP>(this.detach_USERSOFGROUPs));
			OnCreated();
		}
		
		[Column(Storage="_ID_GROUP", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID_GROUP
		{
			get
			{
				return this._ID_GROUP;
			}
			set
			{
				if ((this._ID_GROUP != value))
				{
					this.OnID_GROUPChanging(value);
					this.SendPropertyChanging();
					this._ID_GROUP = value;
					this.SendPropertyChanged("ID_GROUP");
					this.OnID_GROUPChanged();
				}
			}
		}
		
		[Column(Storage="_GRP_NAME", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string GRP_NAME
		{
			get
			{
				return this._GRP_NAME;
			}
			set
			{
				if ((this._GRP_NAME != value))
				{
					this.OnGRP_NAMEChanging(value);
					this.SendPropertyChanging();
					this._GRP_NAME = value;
					this.SendPropertyChanged("GRP_NAME");
					this.OnGRP_NAMEChanged();
				}
			}
		}
		
		[Column(Storage="_GRP_TYPE", DbType="Int NOT NULL")]
		public int GRP_TYPE
		{
			get
			{
				return this._GRP_TYPE;
			}
			set
			{
				if ((this._GRP_TYPE != value))
				{
					this.OnGRP_TYPEChanging(value);
					this.SendPropertyChanging();
					this._GRP_TYPE = value;
					this.SendPropertyChanged("GRP_TYPE");
					this.OnGRP_TYPEChanged();
				}
			}
		}
		
		[Column(Storage="_GRP_STATE", DbType="Char(1)")]
		public System.Nullable<char> GRP_STATE
		{
			get
			{
				return this._GRP_STATE;
			}
			set
			{
				if ((this._GRP_STATE != value))
				{
					this.OnGRP_STATEChanging(value);
					this.SendPropertyChanging();
					this._GRP_STATE = value;
					this.SendPropertyChanged("GRP_STATE");
					this.OnGRP_STATEChanged();
				}
			}
		}
		
		[Column(Storage="_C_DATE", DbType="DateTime NOT NULL")]
		public System.DateTime C_DATE
		{
			get
			{
				return this._C_DATE;
			}
			set
			{
				if ((this._C_DATE != value))
				{
					this.OnC_DATEChanging(value);
					this.SendPropertyChanging();
					this._C_DATE = value;
					this.SendPropertyChanged("C_DATE");
					this.OnC_DATEChanged();
				}
			}
		}
		
		[Column(Storage="_C_USER", DbType="Int NOT NULL")]
		public int C_USER
		{
			get
			{
				return this._C_USER;
			}
			set
			{
				if ((this._C_USER != value))
				{
					this.OnC_USERChanging(value);
					this.SendPropertyChanging();
					this._C_USER = value;
					this.SendPropertyChanged("C_USER");
					this.OnC_USERChanged();
				}
			}
		}
		
		[Column(Storage="_M_DATE", DbType="DateTime")]
		public System.Nullable<System.DateTime> M_DATE
		{
			get
			{
				return this._M_DATE;
			}
			set
			{
				if ((this._M_DATE != value))
				{
					this.OnM_DATEChanging(value);
					this.SendPropertyChanging();
					this._M_DATE = value;
					this.SendPropertyChanged("M_DATE");
					this.OnM_DATEChanged();
				}
			}
		}
		
		[Column(Storage="_M_USER", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary M_USER
		{
			get
			{
				return this._M_USER;
			}
			set
			{
				if ((this._M_USER != value))
				{
					this.OnM_USERChanging(value);
					this.SendPropertyChanging();
					this._M_USER = value;
					this.SendPropertyChanged("M_USER");
					this.OnM_USERChanged();
				}
			}
		}
		
		[Association(Name="GROUP_USERSOFGROUP", Storage="_USERSOFGROUPs", OtherKey="ID_GROUP")]
		public EntitySet<USERSOFGROUP> USERSOFGROUPs
		{
			get
			{
				return this._USERSOFGROUPs;
			}
			set
			{
				this._USERSOFGROUPs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_USERSOFGROUPs(USERSOFGROUP entity)
		{
			this.SendPropertyChanging();
			entity.GROUP = this;
		}
		
		private void detach_USERSOFGROUPs(USERSOFGROUP entity)
		{
			this.SendPropertyChanging();
			entity.GROUP = null;
		}
	}
	
	[Table(Name="dbo.MESSAGES")]
	public partial class MESSAGE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID_MESSAGE;
		
		private string _MSG_BODY;
		
		private int _MSG_TYPE;
		
		private System.DateTime _C_DATE;
		
		private EntitySet<MESSTOUSR> _MESSTOUSRs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_MESSAGEChanging(long value);
    partial void OnID_MESSAGEChanged();
    partial void OnMSG_BODYChanging(string value);
    partial void OnMSG_BODYChanged();
    partial void OnMSG_TYPEChanging(int value);
    partial void OnMSG_TYPEChanged();
    partial void OnC_DATEChanging(System.DateTime value);
    partial void OnC_DATEChanged();
    #endregion
		
		public MESSAGE()
		{
			this._MESSTOUSRs = new EntitySet<MESSTOUSR>(new Action<MESSTOUSR>(this.attach_MESSTOUSRs), new Action<MESSTOUSR>(this.detach_MESSTOUSRs));
			OnCreated();
		}
		
		[Column(Storage="_ID_MESSAGE", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID_MESSAGE
		{
			get
			{
				return this._ID_MESSAGE;
			}
			set
			{
				if ((this._ID_MESSAGE != value))
				{
					this.OnID_MESSAGEChanging(value);
					this.SendPropertyChanging();
					this._ID_MESSAGE = value;
					this.SendPropertyChanged("ID_MESSAGE");
					this.OnID_MESSAGEChanged();
				}
			}
		}
		
		[Column(Storage="_MSG_BODY", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string MSG_BODY
		{
			get
			{
				return this._MSG_BODY;
			}
			set
			{
				if ((this._MSG_BODY != value))
				{
					this.OnMSG_BODYChanging(value);
					this.SendPropertyChanging();
					this._MSG_BODY = value;
					this.SendPropertyChanged("MSG_BODY");
					this.OnMSG_BODYChanged();
				}
			}
		}
		
		[Column(Storage="_MSG_TYPE", DbType="Int NOT NULL")]
		public int MSG_TYPE
		{
			get
			{
				return this._MSG_TYPE;
			}
			set
			{
				if ((this._MSG_TYPE != value))
				{
					this.OnMSG_TYPEChanging(value);
					this.SendPropertyChanging();
					this._MSG_TYPE = value;
					this.SendPropertyChanged("MSG_TYPE");
					this.OnMSG_TYPEChanged();
				}
			}
		}
		
		[Column(Storage="_C_DATE", DbType="DateTime NOT NULL")]
		public System.DateTime C_DATE
		{
			get
			{
				return this._C_DATE;
			}
			set
			{
				if ((this._C_DATE != value))
				{
					this.OnC_DATEChanging(value);
					this.SendPropertyChanging();
					this._C_DATE = value;
					this.SendPropertyChanged("C_DATE");
					this.OnC_DATEChanged();
				}
			}
		}
		
		[Association(Name="MESSAGE_MESSTOUSR", Storage="_MESSTOUSRs", OtherKey="ID_MESSAGE")]
		public EntitySet<MESSTOUSR> MESSTOUSRs
		{
			get
			{
				return this._MESSTOUSRs;
			}
			set
			{
				this._MESSTOUSRs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MESSTOUSRs(MESSTOUSR entity)
		{
			this.SendPropertyChanging();
			entity.MESSAGE = this;
		}
		
		private void detach_MESSTOUSRs(MESSTOUSR entity)
		{
			this.SendPropertyChanging();
			entity.MESSAGE = null;
		}
	}
	
	[Table(Name="dbo.ROLES")]
	public partial class ROLE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_ROLE;
		
		private string _ROLE_NAME;
		
		private string _ROLE_NOTE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_ROLEChanging(int value);
    partial void OnID_ROLEChanged();
    partial void OnROLE_NAMEChanging(string value);
    partial void OnROLE_NAMEChanged();
    partial void OnROLE_NOTEChanging(string value);
    partial void OnROLE_NOTEChanged();
    #endregion
		
		public ROLE()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID_ROLE", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID_ROLE
		{
			get
			{
				return this._ID_ROLE;
			}
			set
			{
				if ((this._ID_ROLE != value))
				{
					this.OnID_ROLEChanging(value);
					this.SendPropertyChanging();
					this._ID_ROLE = value;
					this.SendPropertyChanged("ID_ROLE");
					this.OnID_ROLEChanged();
				}
			}
		}
		
		[Column(Storage="_ROLE_NAME", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ROLE_NAME
		{
			get
			{
				return this._ROLE_NAME;
			}
			set
			{
				if ((this._ROLE_NAME != value))
				{
					this.OnROLE_NAMEChanging(value);
					this.SendPropertyChanging();
					this._ROLE_NAME = value;
					this.SendPropertyChanged("ROLE_NAME");
					this.OnROLE_NAMEChanged();
				}
			}
		}
		
		[Column(Storage="_ROLE_NOTE", DbType="VarChar(300)")]
		public string ROLE_NOTE
		{
			get
			{
				return this._ROLE_NOTE;
			}
			set
			{
				if ((this._ROLE_NOTE != value))
				{
					this.OnROLE_NOTEChanging(value);
					this.SendPropertyChanging();
					this._ROLE_NOTE = value;
					this.SendPropertyChanged("ROLE_NOTE");
					this.OnROLE_NOTEChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.USERS")]
	public partial class USER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_USR;
		
		private string _USR_NICK;
		
		private string _USR_PASSWORD;
		
		private string _USR_FIRSTNAME;
		
		private string _USR_LASTNAME;
		
		private string _USR_COUNTRY;
		
		private string _USR_POSTCODE;
		
		private string _USR_EMAIL;
		
		private string _USR_CITY;
		
		private int _USR_STATE;
		
		private int _USR_STATUS;
		
		private System.DateTime _C_DATE;
		
		private System.Nullable<int> _C_USER;
		
		private System.Nullable<System.DateTime> _M_DATE;
		
		private System.Nullable<int> _M_USER;
		
		private EntitySet<CONTACTLIST> _CONTACTLISTs;
		
		private EntitySet<CONTACTLIST> _CONTACTLISTs1;
		
		private EntitySet<USERSOFGROUP> _USERSOFGROUPs;
		
		private EntitySet<MESSTOUSR> _MESSTOUSRs;
		
		private EntitySet<MESSTOUSR> _MESSTOUSRs1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_USRChanging(int value);
    partial void OnID_USRChanged();
    partial void OnUSR_NICKChanging(string value);
    partial void OnUSR_NICKChanged();
    partial void OnUSR_PASSWORDChanging(string value);
    partial void OnUSR_PASSWORDChanged();
    partial void OnUSR_FIRSTNAMEChanging(string value);
    partial void OnUSR_FIRSTNAMEChanged();
    partial void OnUSR_LASTNAMEChanging(string value);
    partial void OnUSR_LASTNAMEChanged();
    partial void OnUSR_COUNTRYChanging(string value);
    partial void OnUSR_COUNTRYChanged();
    partial void OnUSR_POSTCODEChanging(string value);
    partial void OnUSR_POSTCODEChanged();
    partial void OnUSR_EMAILChanging(string value);
    partial void OnUSR_EMAILChanged();
    partial void OnUSR_CITYChanging(string value);
    partial void OnUSR_CITYChanged();
    partial void OnUSR_STATEChanging(int value);
    partial void OnUSR_STATEChanged();
    partial void OnUSR_STATUSChanging(int value);
    partial void OnUSR_STATUSChanged();
    partial void OnC_DATEChanging(System.DateTime value);
    partial void OnC_DATEChanged();
    partial void OnC_USERChanging(System.Nullable<int> value);
    partial void OnC_USERChanged();
    partial void OnM_DATEChanging(System.Nullable<System.DateTime> value);
    partial void OnM_DATEChanged();
    partial void OnM_USERChanging(System.Nullable<int> value);
    partial void OnM_USERChanged();
    #endregion
		
		public USER()
		{
			this._CONTACTLISTs = new EntitySet<CONTACTLIST>(new Action<CONTACTLIST>(this.attach_CONTACTLISTs), new Action<CONTACTLIST>(this.detach_CONTACTLISTs));
			this._CONTACTLISTs1 = new EntitySet<CONTACTLIST>(new Action<CONTACTLIST>(this.attach_CONTACTLISTs1), new Action<CONTACTLIST>(this.detach_CONTACTLISTs1));
			this._USERSOFGROUPs = new EntitySet<USERSOFGROUP>(new Action<USERSOFGROUP>(this.attach_USERSOFGROUPs), new Action<USERSOFGROUP>(this.detach_USERSOFGROUPs));
			this._MESSTOUSRs = new EntitySet<MESSTOUSR>(new Action<MESSTOUSR>(this.attach_MESSTOUSRs), new Action<MESSTOUSR>(this.detach_MESSTOUSRs));
			this._MESSTOUSRs1 = new EntitySet<MESSTOUSR>(new Action<MESSTOUSR>(this.attach_MESSTOUSRs1), new Action<MESSTOUSR>(this.detach_MESSTOUSRs1));
			OnCreated();
		}
		
		[Column(Storage="_ID_USR", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_USR
		{
			get
			{
				return this._ID_USR;
			}
			set
			{
				if ((this._ID_USR != value))
				{
					this.OnID_USRChanging(value);
					this.SendPropertyChanging();
					this._ID_USR = value;
					this.SendPropertyChanged("ID_USR");
					this.OnID_USRChanged();
				}
			}
		}
		
		[Column(Storage="_USR_NICK", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string USR_NICK
		{
			get
			{
				return this._USR_NICK;
			}
			set
			{
				if ((this._USR_NICK != value))
				{
					this.OnUSR_NICKChanging(value);
					this.SendPropertyChanging();
					this._USR_NICK = value;
					this.SendPropertyChanged("USR_NICK");
					this.OnUSR_NICKChanged();
				}
			}
		}
		
		[Column(Storage="_USR_PASSWORD", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string USR_PASSWORD
		{
			get
			{
				return this._USR_PASSWORD;
			}
			set
			{
				if ((this._USR_PASSWORD != value))
				{
					this.OnUSR_PASSWORDChanging(value);
					this.SendPropertyChanging();
					this._USR_PASSWORD = value;
					this.SendPropertyChanged("USR_PASSWORD");
					this.OnUSR_PASSWORDChanged();
				}
			}
		}
		
		[Column(Storage="_USR_FIRSTNAME", DbType="VarChar(50)")]
		public string USR_FIRSTNAME
		{
			get
			{
				return this._USR_FIRSTNAME;
			}
			set
			{
				if ((this._USR_FIRSTNAME != value))
				{
					this.OnUSR_FIRSTNAMEChanging(value);
					this.SendPropertyChanging();
					this._USR_FIRSTNAME = value;
					this.SendPropertyChanged("USR_FIRSTNAME");
					this.OnUSR_FIRSTNAMEChanged();
				}
			}
		}
		
		[Column(Storage="_USR_LASTNAME", DbType="VarChar(50)")]
		public string USR_LASTNAME
		{
			get
			{
				return this._USR_LASTNAME;
			}
			set
			{
				if ((this._USR_LASTNAME != value))
				{
					this.OnUSR_LASTNAMEChanging(value);
					this.SendPropertyChanging();
					this._USR_LASTNAME = value;
					this.SendPropertyChanged("USR_LASTNAME");
					this.OnUSR_LASTNAMEChanged();
				}
			}
		}
		
		[Column(Storage="_USR_COUNTRY", DbType="VarChar(50)")]
		public string USR_COUNTRY
		{
			get
			{
				return this._USR_COUNTRY;
			}
			set
			{
				if ((this._USR_COUNTRY != value))
				{
					this.OnUSR_COUNTRYChanging(value);
					this.SendPropertyChanging();
					this._USR_COUNTRY = value;
					this.SendPropertyChanged("USR_COUNTRY");
					this.OnUSR_COUNTRYChanged();
				}
			}
		}
		
		[Column(Storage="_USR_POSTCODE", DbType="VarChar(20)")]
		public string USR_POSTCODE
		{
			get
			{
				return this._USR_POSTCODE;
			}
			set
			{
				if ((this._USR_POSTCODE != value))
				{
					this.OnUSR_POSTCODEChanging(value);
					this.SendPropertyChanging();
					this._USR_POSTCODE = value;
					this.SendPropertyChanged("USR_POSTCODE");
					this.OnUSR_POSTCODEChanged();
				}
			}
		}
		
		[Column(Storage="_USR_EMAIL", DbType="VarChar(150) NOT NULL")]
		public string USR_EMAIL
		{
			get
			{
				return this._USR_EMAIL;
			}
			set
			{
				if ((this._USR_EMAIL != value))
				{
					this.OnUSR_EMAILChanging(value);
					this.SendPropertyChanging();
					this._USR_EMAIL = value;
					this.SendPropertyChanged("USR_EMAIL");
					this.OnUSR_EMAILChanged();
				}
			}
		}
		
		[Column(Storage="_USR_CITY", DbType="VarChar(50)")]
		public string USR_CITY
		{
			get
			{
				return this._USR_CITY;
			}
			set
			{
				if ((this._USR_CITY != value))
				{
					this.OnUSR_CITYChanging(value);
					this.SendPropertyChanging();
					this._USR_CITY = value;
					this.SendPropertyChanged("USR_CITY");
					this.OnUSR_CITYChanged();
				}
			}
		}
		
		[Column(Storage="_USR_STATE", DbType="Int NOT NULL")]
		public int USR_STATE
		{
			get
			{
				return this._USR_STATE;
			}
			set
			{
				if ((this._USR_STATE != value))
				{
					this.OnUSR_STATEChanging(value);
					this.SendPropertyChanging();
					this._USR_STATE = value;
					this.SendPropertyChanged("USR_STATE");
					this.OnUSR_STATEChanged();
				}
			}
		}
		
		[Column(Storage="_USR_STATUS", DbType="Int NOT NULL")]
		public int USR_STATUS
		{
			get
			{
				return this._USR_STATUS;
			}
			set
			{
				if ((this._USR_STATUS != value))
				{
					this.OnUSR_STATUSChanging(value);
					this.SendPropertyChanging();
					this._USR_STATUS = value;
					this.SendPropertyChanged("USR_STATUS");
					this.OnUSR_STATUSChanged();
				}
			}
		}
		
		[Column(Storage="_C_DATE", DbType="DateTime NOT NULL")]
		public System.DateTime C_DATE
		{
			get
			{
				return this._C_DATE;
			}
			set
			{
				if ((this._C_DATE != value))
				{
					this.OnC_DATEChanging(value);
					this.SendPropertyChanging();
					this._C_DATE = value;
					this.SendPropertyChanged("C_DATE");
					this.OnC_DATEChanged();
				}
			}
		}
		
		[Column(Storage="_C_USER", DbType="Int")]
		public System.Nullable<int> C_USER
		{
			get
			{
				return this._C_USER;
			}
			set
			{
				if ((this._C_USER != value))
				{
					this.OnC_USERChanging(value);
					this.SendPropertyChanging();
					this._C_USER = value;
					this.SendPropertyChanged("C_USER");
					this.OnC_USERChanged();
				}
			}
		}
		
		[Column(Storage="_M_DATE", DbType="DateTime NOT NULL")]
		public System.Nullable<System.DateTime> M_DATE
		{
			get
			{
				return this._M_DATE;
			}
			set
			{
				if ((this._M_DATE != value))
				{
					this.OnM_DATEChanging(value);
					this.SendPropertyChanging();
					this._M_DATE = value;
					this.SendPropertyChanged("M_DATE");
					this.OnM_DATEChanged();
				}
			}
		}
		
		[Column(Storage="_M_USER", DbType="Int NOT NULL")]
		public System.Nullable<int> M_USER
		{
			get
			{
				return this._M_USER;
			}
			set
			{
				if ((this._M_USER != value))
				{
					this.OnM_USERChanging(value);
					this.SendPropertyChanging();
					this._M_USER = value;
					this.SendPropertyChanged("M_USER");
					this.OnM_USERChanged();
				}
			}
		}
		
		[Association(Name="USER_CONTACTLIST", Storage="_CONTACTLISTs", OtherKey="USR_CONTACT")]
		public EntitySet<CONTACTLIST> CONTACTLISTs
		{
			get
			{
				return this._CONTACTLISTs;
			}
			set
			{
				this._CONTACTLISTs.Assign(value);
			}
		}
		
		[Association(Name="USER_CONTACTLIST1", Storage="_CONTACTLISTs1", OtherKey="USR_MAIN")]
		public EntitySet<CONTACTLIST> CONTACTLISTs1
		{
			get
			{
				return this._CONTACTLISTs1;
			}
			set
			{
				this._CONTACTLISTs1.Assign(value);
			}
		}
		
		[Association(Name="USER_USERSOFGROUP", Storage="_USERSOFGROUPs", OtherKey="ID_USR")]
		public EntitySet<USERSOFGROUP> USERSOFGROUPs
		{
			get
			{
				return this._USERSOFGROUPs;
			}
			set
			{
				this._USERSOFGROUPs.Assign(value);
			}
		}
		
		[Association(Name="USER_MESSTOUSR", Storage="_MESSTOUSRs", OtherKey="ID_SENDER")]
		public EntitySet<MESSTOUSR> MESSTOUSRs
		{
			get
			{
				return this._MESSTOUSRs;
			}
			set
			{
				this._MESSTOUSRs.Assign(value);
			}
		}
		
		[Association(Name="USER_MESSTOUSR1", Storage="_MESSTOUSRs1", OtherKey="ID_USR")]
		public EntitySet<MESSTOUSR> MESSTOUSRs1
		{
			get
			{
				return this._MESSTOUSRs1;
			}
			set
			{
				this._MESSTOUSRs1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CONTACTLISTs(CONTACTLIST entity)
		{
			this.SendPropertyChanging();
			entity.USER = this;
		}
		
		private void detach_CONTACTLISTs(CONTACTLIST entity)
		{
			this.SendPropertyChanging();
			entity.USER = null;
		}
		
		private void attach_CONTACTLISTs1(CONTACTLIST entity)
		{
			this.SendPropertyChanging();
			entity.USER1 = this;
		}
		
		private void detach_CONTACTLISTs1(CONTACTLIST entity)
		{
			this.SendPropertyChanging();
			entity.USER1 = null;
		}
		
		private void attach_USERSOFGROUPs(USERSOFGROUP entity)
		{
			this.SendPropertyChanging();
			entity.USER = this;
		}
		
		private void detach_USERSOFGROUPs(USERSOFGROUP entity)
		{
			this.SendPropertyChanging();
			entity.USER = null;
		}
		
		private void attach_MESSTOUSRs(MESSTOUSR entity)
		{
			this.SendPropertyChanging();
			entity.USER = this;
		}
		
		private void detach_MESSTOUSRs(MESSTOUSR entity)
		{
			this.SendPropertyChanging();
			entity.USER = null;
		}
		
		private void attach_MESSTOUSRs1(MESSTOUSR entity)
		{
			this.SendPropertyChanging();
			entity.USER1 = this;
		}
		
		private void detach_MESSTOUSRs1(MESSTOUSR entity)
		{
			this.SendPropertyChanging();
			entity.USER1 = null;
		}
	}
	
	[Table(Name="dbo.USERSOFGROUP")]
	public partial class USERSOFGROUP : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID_USROFGROUP;
		
		private int _ID_USR;
		
		private long _ID_GROUP;
		
		private EntityRef<GROUP> _GROUP;
		
		private EntityRef<USER> _USER;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_USROFGROUPChanging(long value);
    partial void OnID_USROFGROUPChanged();
    partial void OnID_USRChanging(int value);
    partial void OnID_USRChanged();
    partial void OnID_GROUPChanging(long value);
    partial void OnID_GROUPChanged();
    #endregion
		
		public USERSOFGROUP()
		{
			this._GROUP = default(EntityRef<GROUP>);
			this._USER = default(EntityRef<USER>);
			OnCreated();
		}
		
		[Column(Storage="_ID_USROFGROUP", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID_USROFGROUP
		{
			get
			{
				return this._ID_USROFGROUP;
			}
			set
			{
				if ((this._ID_USROFGROUP != value))
				{
					this.OnID_USROFGROUPChanging(value);
					this.SendPropertyChanging();
					this._ID_USROFGROUP = value;
					this.SendPropertyChanged("ID_USROFGROUP");
					this.OnID_USROFGROUPChanged();
				}
			}
		}
		
		[Column(Storage="_ID_USR", DbType="Int NOT NULL")]
		public int ID_USR
		{
			get
			{
				return this._ID_USR;
			}
			set
			{
				if ((this._ID_USR != value))
				{
					if (this._USER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_USRChanging(value);
					this.SendPropertyChanging();
					this._ID_USR = value;
					this.SendPropertyChanged("ID_USR");
					this.OnID_USRChanged();
				}
			}
		}
		
		[Column(Storage="_ID_GROUP", DbType="BigInt NOT NULL")]
		public long ID_GROUP
		{
			get
			{
				return this._ID_GROUP;
			}
			set
			{
				if ((this._ID_GROUP != value))
				{
					if (this._GROUP.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_GROUPChanging(value);
					this.SendPropertyChanging();
					this._ID_GROUP = value;
					this.SendPropertyChanged("ID_GROUP");
					this.OnID_GROUPChanged();
				}
			}
		}
		
		[Association(Name="GROUP_USERSOFGROUP", Storage="_GROUP", ThisKey="ID_GROUP", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public GROUP GROUP
		{
			get
			{
				return this._GROUP.Entity;
			}
			set
			{
				GROUP previousValue = this._GROUP.Entity;
				if (((previousValue != value) 
							|| (this._GROUP.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GROUP.Entity = null;
						previousValue.USERSOFGROUPs.Remove(this);
					}
					this._GROUP.Entity = value;
					if ((value != null))
					{
						value.USERSOFGROUPs.Add(this);
						this._ID_GROUP = value.ID_GROUP;
					}
					else
					{
						this._ID_GROUP = default(long);
					}
					this.SendPropertyChanged("GROUP");
				}
			}
		}
		
		[Association(Name="USER_USERSOFGROUP", Storage="_USER", ThisKey="ID_USR", IsForeignKey=true)]
		public USER USER
		{
			get
			{
				return this._USER.Entity;
			}
			set
			{
				USER previousValue = this._USER.Entity;
				if (((previousValue != value) 
							|| (this._USER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._USER.Entity = null;
						previousValue.USERSOFGROUPs.Remove(this);
					}
					this._USER.Entity = value;
					if ((value != null))
					{
						value.USERSOFGROUPs.Add(this);
						this._ID_USR = value.ID_USR;
					}
					else
					{
						this._ID_USR = default(int);
					}
					this.SendPropertyChanged("USER");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.USR2ROLE")]
	public partial class USR2ROLE
	{
		
		private int _ID_USR;
		
		private int _ID_ROLE;
		
		public USR2ROLE()
		{
		}
		
		[Column(Storage="_ID_USR", DbType="Int NOT NULL")]
		public int ID_USR
		{
			get
			{
				return this._ID_USR;
			}
			set
			{
				if ((this._ID_USR != value))
				{
					this._ID_USR = value;
				}
			}
		}
		
		[Column(Storage="_ID_ROLE", DbType="Int NOT NULL")]
		public int ID_ROLE
		{
			get
			{
				return this._ID_ROLE;
			}
			set
			{
				if ((this._ID_ROLE != value))
				{
					this._ID_ROLE = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.MESSTOUSR")]
	public partial class MESSTOUSR : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID_MSGSEND;
		
		private int _ID_USR;
		
		private long _ID_MESSAGE;
		
		private int _ID_SENDER;
		
		private int _MSG_STATE;
		
		private EntityRef<MESSAGE> _MESSAGE;
		
		private EntityRef<USER> _USER;
		
		private EntityRef<USER> _USER1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_MSGSENDChanging(long value);
    partial void OnID_MSGSENDChanged();
    partial void OnID_USRChanging(int value);
    partial void OnID_USRChanged();
    partial void OnID_MESSAGEChanging(long value);
    partial void OnID_MESSAGEChanged();
    partial void OnID_SENDERChanging(int value);
    partial void OnID_SENDERChanged();
    partial void OnMSG_STATEChanging(int value);
    partial void OnMSG_STATEChanged();
    #endregion
		
		public MESSTOUSR()
		{
			this._MESSAGE = default(EntityRef<MESSAGE>);
			this._USER = default(EntityRef<USER>);
			this._USER1 = default(EntityRef<USER>);
			OnCreated();
		}
		
		[Column(Storage="_ID_MSGSEND", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID_MSGSEND
		{
			get
			{
				return this._ID_MSGSEND;
			}
			set
			{
				if ((this._ID_MSGSEND != value))
				{
					this.OnID_MSGSENDChanging(value);
					this.SendPropertyChanging();
					this._ID_MSGSEND = value;
					this.SendPropertyChanged("ID_MSGSEND");
					this.OnID_MSGSENDChanged();
				}
			}
		}
		
		[Column(Storage="_ID_USR", DbType="Int NOT NULL")]
		public int ID_USR
		{
			get
			{
				return this._ID_USR;
			}
			set
			{
				if ((this._ID_USR != value))
				{
					if (this._USER1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_USRChanging(value);
					this.SendPropertyChanging();
					this._ID_USR = value;
					this.SendPropertyChanged("ID_USR");
					this.OnID_USRChanged();
				}
			}
		}
		
		[Column(Storage="_ID_MESSAGE", DbType="BigInt NOT NULL")]
		public long ID_MESSAGE
		{
			get
			{
				return this._ID_MESSAGE;
			}
			set
			{
				if ((this._ID_MESSAGE != value))
				{
					if (this._MESSAGE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_MESSAGEChanging(value);
					this.SendPropertyChanging();
					this._ID_MESSAGE = value;
					this.SendPropertyChanged("ID_MESSAGE");
					this.OnID_MESSAGEChanged();
				}
			}
		}
		
		[Column(Storage="_ID_SENDER", DbType="Int NOT NULL")]
		public int ID_SENDER
		{
			get
			{
				return this._ID_SENDER;
			}
			set
			{
				if ((this._ID_SENDER != value))
				{
					if (this._USER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_SENDERChanging(value);
					this.SendPropertyChanging();
					this._ID_SENDER = value;
					this.SendPropertyChanged("ID_SENDER");
					this.OnID_SENDERChanged();
				}
			}
		}
		
		[Column(Storage="_MSG_STATE", DbType="Int NOT NULL")]
		public int MSG_STATE
		{
			get
			{
				return this._MSG_STATE;
			}
			set
			{
				if ((this._MSG_STATE != value))
				{
					this.OnMSG_STATEChanging(value);
					this.SendPropertyChanging();
					this._MSG_STATE = value;
					this.SendPropertyChanged("MSG_STATE");
					this.OnMSG_STATEChanged();
				}
			}
		}
		
		[Association(Name="MESSAGE_MESSTOUSR", Storage="_MESSAGE", ThisKey="ID_MESSAGE", IsForeignKey=true)]
		public MESSAGE MESSAGE
		{
			get
			{
				return this._MESSAGE.Entity;
			}
			set
			{
				MESSAGE previousValue = this._MESSAGE.Entity;
				if (((previousValue != value) 
							|| (this._MESSAGE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MESSAGE.Entity = null;
						previousValue.MESSTOUSRs.Remove(this);
					}
					this._MESSAGE.Entity = value;
					if ((value != null))
					{
						value.MESSTOUSRs.Add(this);
						this._ID_MESSAGE = value.ID_MESSAGE;
					}
					else
					{
						this._ID_MESSAGE = default(long);
					}
					this.SendPropertyChanged("MESSAGE");
				}
			}
		}
		
		[Association(Name="USER_MESSTOUSR", Storage="_USER", ThisKey="ID_SENDER", IsForeignKey=true)]
		public USER USER
		{
			get
			{
				return this._USER.Entity;
			}
			set
			{
				USER previousValue = this._USER.Entity;
				if (((previousValue != value) 
							|| (this._USER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._USER.Entity = null;
						previousValue.MESSTOUSRs.Remove(this);
					}
					this._USER.Entity = value;
					if ((value != null))
					{
						value.MESSTOUSRs.Add(this);
						this._ID_SENDER = value.ID_USR;
					}
					else
					{
						this._ID_SENDER = default(int);
					}
					this.SendPropertyChanged("USER");
				}
			}
		}
		
		[Association(Name="USER_MESSTOUSR1", Storage="_USER1", ThisKey="ID_USR", IsForeignKey=true)]
		public USER USER1
		{
			get
			{
				return this._USER1.Entity;
			}
			set
			{
				USER previousValue = this._USER1.Entity;
				if (((previousValue != value) 
							|| (this._USER1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._USER1.Entity = null;
						previousValue.MESSTOUSRs1.Remove(this);
					}
					this._USER1.Entity = value;
					if ((value != null))
					{
						value.MESSTOUSRs1.Add(this);
						this._ID_USR = value.ID_USR;
					}
					else
					{
						this._ID_USR = default(int);
					}
					this.SendPropertyChanged("USER1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
